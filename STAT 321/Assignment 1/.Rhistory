rolls <- sample(1:8, size = 20, replace = TRUE)
rolls
die_roll <- function(i=10,j=5){
n_total <- 10000
count1 <- c(0)
count2 <- c(0)
for(k in 1:n_total){
rolls <- sample(1:8, size = 20, replace = TRUE)
i_comp <- sum(rolls[]>=6)
j_comp <- sum(rolls[]>=4)
if(i_comp >= i){
count1 = count1 + 1
}
if(j_comp >= j){
count2 = count2 + 1
}
}
out <- count1/count2
return(out)
}
final <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
for(m in 1:3){
for(o in 1:5){
final[o,m] <- die_roll(m+11,o+7)
}
}
colnames(final) <- c("i=12","i=13","i=14")
final
rolls <- sample(1:8, size = 20, replace = TRUE)
i_comp <- sum(rolls[]>=6)
j_comp <- sum(rolls[]>=4)
rolls
i_comp
j_comp
die_roll(12,8)
View(final)
die_roll(12,8)
die_roll(12,8)
die_roll(12,8)
condition_1 = condition_2 <- c(0)
final <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
die_roll <- function(i=10,j=5){
n_total <- 10000
count1 <- c(0)
count2 <- c(0)
for(k in 1:n_total){
rolls <- sample(1:8, size = 20, replace = TRUE)
i_comp <- sum(rolls[]>5)
j_comp <- sum(rolls[]>3)
if(i_comp >= i){
count1 = count1 + 1
}
if(j_comp >= j){
count2 = count2 + 1
}
}
out <- count1/count2
return(out)
}
for(m in 1:3){
for(o in 1:5){
print(m,o)
final[o,m] <- die_roll(m+11,o+7)
}
}
print("i=")
for(m in 1:3){
for(o in 1:5){
print("i=",m)
print("j=",o)
final[o,m] <- die_roll(m+11,o+7)
}
}
for(m in 1:3){
for(o in 1:5){
print("i=",m)
print("j=",o)
final[o,m] <- die_roll(m+11,o+7)
}
}
?print
clear()
print("i=", "m")
for(m in 1:3){
for(o in 1:5){
print("i=", "m")
print("j=", o)
final[o,m] <- die_roll(m+11,o+7)
}
}
print("i=", m)
print(m)
for(m in 1:3){
for(o in 1:5){
print("i=")
print(m)
print("j=")
print(o)
final[o,m] <- die_roll(m+11,o+7)
}
}
die_roll <- function(i=10,j=5){
n_total <- 10000
count1 <- c(0)
count2 <- c(0)
for(k in 1:n_total){
rolls <- sample(1:8, size = 20, replace = TRUE)
i_comp <- sum(rolls[]>5)
j_comp <- sum(rolls[]>3)
if(i_comp >= i){
count1 = count1 + 1
}
if(j_comp >= j){
count2 = count2 + 1
}
}
out <- count1/count2
return(out)
}
final <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
for(m in 1:3){
for(o in 1:5){
print("i=")
print(m)
print("j=")
print(o)
final[o,m] <- die_roll(m+11,o+7)
}
}
for(i in 12:14){
for(j in 8:12){
print("for i=")
print(m)
print("and j=")
print(o)
print(die_roll(i,j))
}
}
gc()
die_roll <- function(i=10,j=5){
n_total <- 10000
count1 <- c(0)
count2 <- c(0)
for(k in 1:n_total){
rolls <- sample(1:8, size = 20, replace = TRUE)
i_comp <- sum(rolls[]>5)
j_comp <- sum(rolls[]>3)
if(i_comp >= i){
count1 = count1 + 1
}
if(j_comp >= j){
count2 = count2 + 1
}
}
out <- count1/count2
return(out)
}
for(i in 12:14){
for(j in 8:12){
print("for i=")
print(i)
print("and j=")
print(j)
print(die_roll(i,j))
}
}
## (a)
# Run number of simulations to estimate probability
number_sim <- 10000
knitr::opts_chunk$set(echo = TRUE)
# Run number of simulations to estimate probability
number_sim <- 10000
# Add conditions to satisfy calculating probability for events
condition_1 = condition_2 <- c(0)
# Simulating n= number_sim rolls
for(k in 1:number_sim){
sample_rolls <- sample(1:8, size = 20, replace = TRUE)
# Checking if the sample satisfies for i and j
i_check <- sum(sample_rolls[]>=6)
j_check <- sum(sample_rolls[]>=4)
# Counting the samples which satisfy conditions 1 and 2
if(i_check >= i){
condition_1 = condition_1 + 1
}
if(j_check >= j){
condition_2 = condition_2 + 1
}
}
sim_dice <- function(i,j){
number_sim <- 10000
condition_1 = condition_2 <- c(0)
for(k in 1:number_sim){
sample_rolls <- sample(1:8, size = 20, replace = TRUE)
i_check <- sum(sample_rolls[]>=6)
j_check <- sum(sample_rolls[]>=4)
if(i_check >= i){
condition_1 = condition_1 + 1
}
if(j_check >= j){
condition_2 = condition_2 + 1
}
}
prob <- count1/count2
return(prob)
}
output <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
for(m in 1:3){
for(o in 1:5){
output[o,m] <- die_roll(m+11,o+7)
}
}
sim_dice <- function(i,j){
number_sim <- 10000
condition_1 = condition_2 <- c(0)
for(k in 1:number_sim){
sample_rolls <- sample(1:8, size = 20, replace = TRUE)
i_check <- sum(sample_rolls[]>=6)
j_check <- sum(sample_rolls[]>=4)
if(i_check >= i){
condition_1 = condition_1 + 1
}
if(j_check >= j){
condition_2 = condition_2 + 1
}
}
prob <- count1/count2
return(prob)
}
output <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
for(m in 1:3){
for(o in 1:5){
output[o,m] <- sim_dice(m+11,o+7)
}
}
sim_dice <- function(i,j){
number_sim <- 10000
condition_1 = condition_2 <- c(0)
for(k in 1:number_sim){
sample_rolls <- sample(1:8, size = 20, replace = TRUE)
i_check <- sum(sample_rolls[]>=6)
j_check <- sum(sample_rolls[]>=4)
if(i_check >= i){
condition_1 = condition_1 + 1
}
if(j_check >= j){
condition_2 = condition_2 + 1
}
}
prob <- condition_1/condition_2
return(prob)
}
output <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
for(m in 1:3){
for(o in 1:5){
output[o,m] <- sim_dice(m+11,o+7)
}
}
colnames(output) <- c("i=12","i=13","i=14")
output
knitr::opts_chunk$set(echo = TRUE)
sim_dice <- function(i,j){
number_sim <- 10000
condition_1 = condition_2 <- c(0)
for(k in 1:number_sim){
sample_rolls <- sample(1:8, size = 20, replace = TRUE)
if(sum(sample_rolls[]>=6) >= i){
condition_1 = condition_1 + 1
}
if(sum(sample_rolls[]>=4) >= j){
condition_2 = condition_2 + 1
}
}
prob <- condition_1/condition_2
return(prob)
}
output <- data.frame(row.names = c("j=8","j=9","j=10","j=11","j=12"))
for(m in 1:3){
for(o in 1:5){
output[o,m] <- sim_dice(m+11,o+7)
}
}
colnames(output) <- c("i=12","i=13","i=14")
output
